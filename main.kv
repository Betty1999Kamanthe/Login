<MDTextField>

    canvas.before:
        Clear
        Color:
            rgba: self.line_color_normal if root.mode == "line" else [0, 0, 0, 0]
        Line:
            points:
                self.x, self.y + dp(16), self.x + self.width, self.y + dp(16)
            width: 1
            dash_length: dp(3)
            dash_offset: 2 if self.disabled else 0

        Color:
            rgba: self._current_line_color if root.mode == "line" else [0, 0, 0, 0]
        Rectangle:
            size: self._line_width, dp(2)
            pos: self.center_x - (self._line_width / 2), self.y + dp(16)

        Color:
            rgba: self._current_error_color
        Rectangle:
            texture: self._msg_lbl.texture
            size: self._msg_lbl.texture_size
            pos: self.x, self.y

        Color:
            rgba: self._current_right_lbl_color
        Rectangle:
            texture: self._right_msg_lbl.texture
            size: self._right_msg_lbl.texture_size
            pos: self.width-self._right_msg_lbl.texture_size[0]+dp(45), self.y

        Color:
            rgba:
                (self._current_line_color if self.focus and not \
                self._cursor_blink else (0, 0, 0, 0))
        Rectangle:
            pos: [int(x) for x in self.cursor_pos]
            size: 1, -self.line_height

        Color:
            rgba: self._current_hint_text_color
        Rectangle:
            texture: self._hint_lbl.texture
            size: self._hint_lbl.texture_size
            pos: self.x, self.y + self.height - self._hint_y

        Color:
            rgba:
                self.disabled_foreground_color if self.disabled else\
                (self.hint_text_color if not self.text and not\
                self.focus else self.foreground_color)

        Color:
            rgba: self._current_line_color
        Line:
            width: dp(1) if root.mode == "rectangle" else dp(0.00001)
            points:
                (
                self.x + root._line_blank_space_right_hint_text, self.top - self._hint_lbl.texture_size[1] // 2,
                self.right + dp(12), self.top - self._hint_lbl.texture_size[1] // 2,
                self.right + dp(12), self.y,
                self.x - dp(12), self.y,
                self.x - dp(12), self.top - self._hint_lbl.texture_size[1] // 2,
                self.x + root._line_blank_space_left_hint_text, self.top - self._hint_lbl.texture_size[1] // 2
                )

    font_name: 'Roboto'
    foreground_color: app.theme_cls.text_color
    font_size: sp(16)
    bold: False
    padding: 0, dp(16), 0, dp(10)
    multiline: False
    size_hint_y: None
    height: self.minimum_height + dp(8)


<TextfieldLabel>
    size_hint_x: None
    width: self.texture_size[0]
    shorten: True
    shorten_from: "right"


<MDTextFieldClear>
    size_hint_y: None
    height: self.minimum_height

    FloatLayout:

        MDTextField:
            id: field
            text: root.text
            password: root.password
            password_mask: root.password_mask
            pos_hint: {'center_x': .5}
            padding: 0, clear_btn.width + dp(15)
            hint_text: root.hint_text
            on_focus:
                clear_btn.custom_color = self.line_color_focus\
                if clear_btn.custom_color != self.line_color_focus\
                else self.line_color_normal
            on_text:
                root.text = self.text

        MDTextButton:
            id: clear_btn
            text: 'X'
            pos_hint: {'right': 1, 'top': .1}
            custom_color: field.line_color_normal
            on_press: root.refresh_field(field, clear_btn)


<MDTextFieldRect>
    on_focus:
        root.anim_rect([root.x, root.y, root.right, root.y, root.right,\
        root.top, root.x, root.top, root.x, root.y], 1) if root.focus\
        else root.anim_rect([root.x - dp(60), root.y - dp(60),\
        root.right + dp(60), root.y - dp(60),
        root.right + dp(60), root.top + dp(60),\
        root.x - dp(60), root.top + dp(60),\
        root.x - dp(60), root.y - dp(60)], 0)

    canvas.after:
        Color:
            rgba: root._primary_color
        Line:
            width: dp(1.5)
            points:
                (
                self.x - dp(60), self.y - dp(60),
                self.right + dp(60), self.y - dp(60),
                self.right + dp(60), self.top + dp(60),
                self.x - dp(60), self.top + dp(60),
                self.x - dp(60), self.y - dp(60)
                )

<MDTextFieldRound>
    orientation: 'vertical'
    size_hint: None, None
    height: self.minimum_height
    _instance_icon_left: icon_left
    _instance_icon_right: icon_right

    BoxLayout:
        id: box
        size_hint: None, None
        size: root.size[0], dp(48) if not root.field_height else root.field_height
        pos_hint: {'center_x': .5}

        canvas:
            Color:
                rgba: root._current_color
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [root.radius,]
        canvas.after:
            Color:
                rgba: root._outline_color
            Line:
                width: 1.1
                rounded_rectangle:
                    (self.x, self.y, self.width, self.height,\
                    root.radius, root.radius, root.radius, root.radius,\
                    self.height)

        MDIconButton:
            id: icon_left
            icon: root.icon_left
            disabled: True if root.icon_left_disabled else False
            theme_text_color: 'Custom'
            text_color: root.icon_left_color
            on_release: if root.icon_callback: root.icon_callback(field, self)
            user_font_size: root.icon_size
            pos_hint: {"center_y": .5}

        TextInput:
            id: field
            text: root.text
            password: root.password
            password_mask: root.password_mask
            background_active: f'{images_path}transparent.png'
            background_normal: f'{images_path}transparent.png'
            multiline: False
            padding: (box.height / 2) - (self.line_height / 2)
            cursor_color: root.cursor_color
            foreground_color: root.foreground_color
            hint_text: root.hint_text
            selection_color: root.selection_color
            hint_text_color: root.hint_text_color
            write_tab: root.write_tab
            input_filter: root.input_filter
            readonly: root.readonly
            tab_width:root.tab_width
            text_language: root.text_language
            font_context: root.font_context
            font_name: root.font_name
            font_family: root.font_family
            font_size: sp(root.font_size)
            allow_copy: root.allow_copy
            text_validate_unfocus: root.text_validate_unfocus
            focus: root.focus
            on_focus: root._on_focus(self)
            on_text:
                root.text = self.text
                root.dispatch("on_text")
            on_text_validate:
                root.dispatch("on_text_validate")

        MDIconButton:
            id: icon_right
            icon: root.icon_right
            disabled: True if root.icon_right_disabled else False
            theme_text_color: 'Custom'
            text_color: root.icon_right_color
            on_release: if root.icon_callback: root.icon_callback(field, self)
            user_font_size: root.icon_size
            pos_hint: {"center_y": .5}

    Widget:
        id: spacer
        size_hint_y: None
        height: 0

    Label:
        id: label_error_require
        size_hint: None, None
        size: self.texture_size
        color: root.error_color
        pos_hint: {'center_x': .5}
        halign: 'center'